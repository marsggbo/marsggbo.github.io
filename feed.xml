<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://marsggbo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://marsggbo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-29T16:00:59+00:00</updated><id>https://marsggbo.github.io/feed.xml</id><title type="html">blank</title><subtitle>SSS: Study, Sleep, Slim </subtitle><entry><title type="html">vLLM 源码解析（一）</title><link href="https://marsggbo.github.io/blog/2024/vllm-%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88/" rel="alternate" type="text/html" title="vLLM 源码解析（一）"/><published>2024-02-04T16:40:16+00:00</published><updated>2024-02-04T16:40:16+00:00</updated><id>https://marsggbo.github.io/blog/2024/vllm%20%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88</id><content type="html" xml:base="https://marsggbo.github.io/blog/2024/vllm-%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88/"><![CDATA[<h1 id="1-quick-start">1. Quick Start</h1> <p>创建如下代码，命名为 <code class="language-plaintext highlighter-rouge">run.py</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">vllm</span> <span class="kn">import</span> <span class="n">LLM</span><span class="p">,</span> <span class="n">SamplingParams</span>

<span class="n">prompts</span> <span class="o">=</span> <span class="p">[</span>
	<span class="sh">"</span><span class="s">Have you followed marsggbo in Zhihu?</span><span class="sh">"</span><span class="p">,</span>
	<span class="sh">"</span><span class="s">你一键三连了吗？</span><span class="sh">"</span>
<span class="p">]</span> <span class="c1"># 输入prompts
</span><span class="n">sampling_params</span> <span class="o">=</span> <span class="nc">SamplingParams</span><span class="p">(</span><span class="n">temperature</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">top_k</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span> <span class="c1"># 采样策略
</span><span class="n">llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">facebook/opt-125m</span><span class="sh">"</span><span class="p">,</span> <span class="n">tensor_parallel_size</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 初始化 LLM
</span><span class="n">outputs</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="n">prompts</span><span class="p">,</span> <span class="n">sampling_params</span><span class="p">)</span> <span class="c1"># 完成推理
</span><span class="k">for</span> <span class="n">output</span> <span class="ow">in</span> <span class="n">outputs</span><span class="p">:</span>
	<span class="n">prompt</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="n">prompt</span>
    <span class="n">generated_text</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="n">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">text</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Prompt: </span><span class="si">{</span><span class="n">prompt</span><span class="si">!r}</span><span class="s">, Generated text: </span><span class="si">{</span><span class="n">generated_text</span><span class="si">!r}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>执行命令：<code class="language-plaintext highlighter-rouge">python run.py</code>。该脚本会自动将模型以张量并行的方式在两个 GPU 上进行推理计算。</p> <p>整个推理过程大大致流程如下图所示，即 1 给定一定数量的 prompts（字符串数组）</p> <ol> <li>vllm 会使用 Scheduler 模块自动对需要推理句子进行调度</li> <li>根据调度的结果，使用 tokenizer 将字符串转换成 prompt id，然后喂给 model 进行计算得到 logits 预测结果</li> <li>根据 logits 预测结果和提前设置好的采样策略对结果进行采样得到新的 token id</li> <li>将采样结果保存到 output</li> </ol> <p><img src="https://raw.githubusercontent.com/marsggbo/PicBed/master/小书匠/2024_2_4_1707030203438.png" alt="inferencce pipeline"/></p> <h1 id="2-整体核心模块">2. 整体核心模块</h1> <p><img src="https://raw.githubusercontent.com/marsggbo/PicBed/master/小书匠/2024_2_4_1707037549078.png" alt="vllm 核心模块结构"/> 上图给出了 vLLM 核心模块之间的结构关系。接下来我们从简单的模块（即输入、采样和输出）开始介绍，最后详细介绍 LLM 模块。</p> <h1 id="3-sequence">3. Sequence</h1> <p><img src="https://raw.githubusercontent.com/marsggbo/PicBed/master/小书匠/2024_2_4_1707031824422.png" alt="句子模块"/> 如上图我们可以看到 vLLM 为输入的句子设计了很多子模块，这些模块的用处各不相同，但是有彼此之间有关系，下面分别详细介绍一下。</p> <h1 id="31-sequencestatus">3.1 SequenceStatus</h1> <p>首先看到 <code class="language-plaintext highlighter-rouge">SequenceStatus</code>，其源代码如下：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SequenceStatus</span><span class="p">(</span><span class="n">enum</span><span class="p">.</span><span class="n">Enum</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Status of a sequence.</span><span class="sh">"""</span>
    <span class="n">WAITING</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">auto</span><span class="p">()</span> <span class="c1"># 等待中，句子还没开始推理，或者推理还未结束
</span>    <span class="n">RUNNING</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">auto</span><span class="p">()</span> <span class="c1"># 运行中
</span>    <span class="n">SWAPPED</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">auto</span><span class="p">()</span> <span class="c1"># 已交换
</span>    <span class="n">FINISHED_STOPPED</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">auto</span><span class="p">()</span> <span class="c1"># 已停止
</span>    <span class="n">FINISHED_LENGTH_CAPPED</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">auto</span><span class="p">()</span> <span class="c1"># 已长度限制
</span>    <span class="n">FINISHED_ABORTED</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">auto</span><span class="p">()</span> <span class="c1"># 已中止
</span>    <span class="n">FINISHED_IGNORED</span> <span class="o">=</span> <span class="n">enum</span><span class="p">.</span><span class="nf">auto</span><span class="p">()</span> <span class="c1"># 已忽略
</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">is_finished</span><span class="p">(</span><span class="n">status</span><span class="p">:</span> <span class="sh">"</span><span class="s">SequenceStatus</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="c1"># 判断状态是否为已停止、已长度限制、已中止或已忽略
</span>        <span class="k">return</span> <span class="n">status</span> <span class="ow">in</span> <span class="p">[</span>
            <span class="n">SequenceStatus</span><span class="p">.</span><span class="n">FINISHED_STOPPED</span><span class="p">,</span>
            <span class="n">SequenceStatus</span><span class="p">.</span><span class="n">FINISHED_LENGTH_CAPPED</span><span class="p">,</span>
            <span class="n">SequenceStatus</span><span class="p">.</span><span class="n">FINISHED_ABORTED</span><span class="p">,</span>
            <span class="n">SequenceStatus</span><span class="p">.</span><span class="n">FINISHED_IGNORED</span><span class="p">,</span>
        <span class="p">]</span>
</code></pre></div></div> <h2 id="32-sequencedata">3.2 SequenceData</h2> <p><code class="language-plaintext highlighter-rouge">SequenceData</code> 用于存储与序列相关的数据。这个类有三个属性：<code class="language-plaintext highlighter-rouge">prompt_token_ids</code>（提示词的标记ID）、<code class="language-plaintext highlighter-rouge">output_token_ids</code>（生成文本的标记ID）和<code class="language-plaintext highlighter-rouge">cumulative_logprob</code>（累计对数概率）。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SequenceData</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">prompt_token_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prompt_token_ids</span> <span class="o">=</span> <span class="n">prompt_token_ids</span>
        <span class="n">self</span><span class="p">.</span><span class="n">output_token_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cumulative_logprob</span> <span class="o">=</span> <span class="mf">0.0</span>
</code></pre></div></div> <h2 id="33-sequence">3.3 Sequence</h2> <p><code class="language-plaintext highlighter-rouge">Sequence</code> 用于存储序列的数据、状态和块信息,且每个序列有唯一标识，即<code class="language-plaintext highlighter-rouge">seq_id</code>。注意看下面的代码：</p> <ul> <li><strong>数据</strong>其实是通过上面的 <code class="language-plaintext highlighter-rouge">SequenceData</code> 保存的</li> <li>默认初始化状态，所有句子序列的<strong>状态</strong>都是 <code class="language-plaintext highlighter-rouge">SequenceStatus.WAITING</code></li> <li>所谓<strong>块信息</strong>，其实就是 vLLM 会在初始化阶段预留出一定数量的CPU 和 GPU 内存，一般是以 token 为单位的，例如在初始化的时候会使用值全为 0，大小为 (256, 128)的 prompt_ids做 warm up。每个序列会按照实际大小申请 block 来记录内存使用情况，即序列 token 数越多，属性<code class="language-plaintext highlighter-rouge">logical_token_blocks</code>包含的 block 个数也就越多。 <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Sequence</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
      <span class="n">self</span><span class="p">,</span>
      <span class="n">seq_id</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
      <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
      <span class="n">prompt_token_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span>
      <span class="n">block_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
  <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
      <span class="n">self</span><span class="p">.</span><span class="n">seq_id</span> <span class="o">=</span> <span class="n">seq_id</span>
      <span class="n">self</span><span class="p">.</span><span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt</span>
      <span class="n">self</span><span class="p">.</span><span class="n">block_size</span> <span class="o">=</span> <span class="n">block_size</span>

      <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="nc">SequenceData</span><span class="p">(</span><span class="n">prompt_token_ids</span><span class="p">)</span> <span class="c1"># 数据
</span>
      <span class="n">self</span><span class="p">.</span><span class="n">logical_token_blocks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">LogicalTokenBlock</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="c1"># Initialize the logical token blocks with the prompt token ids.
</span>      <span class="n">self</span><span class="p">.</span><span class="nf">_append_tokens_to_blocks</span><span class="p">(</span><span class="n">prompt_token_ids</span><span class="p">)</span> <span class="c1"># 块信息
</span>      <span class="n">self</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">SequenceStatus</span><span class="p">.</span><span class="n">WAITING</span> <span class="c1"># 状态
</span>      <span class="bp">...</span>
</code></pre></div> </div> </li> </ul> <h2 id="33-sequencegroup">3.3 SequenceGroup</h2> <p><code class="language-plaintext highlighter-rouge">Sequence</code>只是单个序列的表示方式,<code class="language-plaintext highlighter-rouge">seq_id</code>是它的唯一标识。<code class="language-plaintext highlighter-rouge">SequenceGroup</code>则是为了表示多个序列，<code class="language-plaintext highlighter-rouge">request_id</code>是它的唯一标识，表示是第几个请求。</p> <p>具体而言，可以看到<code class="language-plaintext highlighter-rouge">__init__</code>函数有个参数是 <code class="language-plaintext highlighter-rouge">seqs: List[Sequence]</code>，它表示由一个或多个 Sequence 组成的列表，然后会通过<code class="language-plaintext highlighter-rouge">self.seqs_dict = {seq.seq_id: seq for seq in seqs}</code>转化成字典方便管理，这个字典的 key 是每个 Sequence 的唯一标识<code class="language-plaintext highlighter-rouge">seq_id</code>。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SequenceGroup</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">request_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">seqs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Sequence</span><span class="p">],</span>
        <span class="n">sampling_params</span><span class="p">:</span> <span class="n">SamplingParams</span><span class="p">,</span>
        <span class="n">arrival_time</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span>
        <span class="n">lora_request</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">LoRARequest</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">prefix</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Prefix</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">request_id</span> <span class="o">=</span> <span class="n">request_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">seqs_dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">seq</span><span class="p">.</span><span class="n">seq_id</span><span class="p">:</span> <span class="n">seq</span> <span class="k">for</span> <span class="n">seq</span> <span class="ow">in</span> <span class="n">seqs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sampling_params</span> <span class="o">=</span> <span class="n">sampling_params</span>
        <span class="n">self</span><span class="p">.</span><span class="n">arrival_time</span> <span class="o">=</span> <span class="n">arrival_time</span>
		<span class="bp">...</span>
</code></pre></div></div> <p>下面是 vLLm 中 LLMEngine 使用 Sequence 和 SequenceGroup 的场景示例：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LLMEngine</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">add_request</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">request_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">prompt</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
        <span class="n">sampling_params</span><span class="p">:</span> <span class="n">SamplingParams</span><span class="p">,</span>
        <span class="n">prompt_token_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">arrival_time</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">lora_request</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">LoRARequest</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">prefix_pos</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">prompt_token_ids</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encode_request</span><span class="p">(</span>
            <span class="n">request_id</span><span class="o">=</span><span class="n">request_id</span><span class="p">,</span>
            <span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
            <span class="n">prompt_token_ids</span><span class="o">=</span><span class="n">prompt_token_ids</span><span class="p">,</span>
            <span class="n">lora_request</span><span class="o">=</span><span class="n">lora_request</span><span class="p">)</span> <span class="c1"># 将字符串序列转换成 id
</span>
        <span class="c1"># Create the sequences.
</span>        <span class="n">block_size</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_config</span><span class="p">.</span><span class="n">block_size</span>
        <span class="n">seq_id</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">seq_counter</span><span class="p">)</span>
        <span class="n">seq</span> <span class="o">=</span> <span class="nc">Sequence</span><span class="p">(</span><span class="n">seq_id</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">prompt_token_ids</span><span class="p">,</span> <span class="n">block_size</span><span class="p">,</span>
                       <span class="n">lora_request</span><span class="p">)</span>

        <span class="c1"># Create the sequence group.
</span>        <span class="n">seq_group</span> <span class="o">=</span> <span class="nc">SequenceGroup</span><span class="p">(</span><span class="n">request_id</span><span class="p">,</span> <span class="p">[</span><span class="n">seq</span><span class="p">],</span> <span class="n">sampling_params</span><span class="p">,</span>
                                  <span class="n">arrival_time</span><span class="p">)</span>

        <span class="c1"># Add the sequence group to the scheduler.
</span>        <span class="n">self</span><span class="p">.</span><span class="n">scheduler</span><span class="p">.</span><span class="nf">add_seq_group</span><span class="p">(</span><span class="n">seq_group</span><span class="p">)</span>
</code></pre></div></div> <p>可以看到<code class="language-plaintext highlighter-rouge">SequenceGroup</code>的<code class="language-plaintext highlighter-rouge">seqs</code>参数在最初阶段其实只是单个序列 ，即<code class="language-plaintext highlighter-rouge">[seq]</code>。但是我们知道其实一个 prompt 可以有多个输出结果，所以<code class="language-plaintext highlighter-rouge">SequenceGroup</code>的目的是管理一个输入 prompt的多个生成序列信息。如果我们设置<code class="language-plaintext highlighter-rouge">SamplingParams.n=2</code>（第 4 节会介绍），那么在推理过程中，<code class="language-plaintext highlighter-rouge">SequenceGroup</code>会新增一个 Sequence，这个新增的 Sequence 的 seq_id 和原来的那个 Sequence 不一样，具体的代码细节会在下一篇文章中介绍。</p> <h2 id="35-sequencegroupmetadata">3.5 SequenceGroupMetadata</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SequenceGroupMetadata</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">request_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">is_prompt</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
        <span class="n">seq_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">SequenceData</span><span class="p">],</span>
        <span class="n">sampling_params</span><span class="p">:</span> <span class="n">SamplingParams</span><span class="p">,</span>
        <span class="n">block_tables</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">request_id</span> <span class="o">=</span> <span class="n">request_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">is_prompt</span> <span class="o">=</span> <span class="n">is_prompt</span>
        <span class="n">self</span><span class="p">.</span><span class="n">seq_data</span> <span class="o">=</span> <span class="n">seq_data</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sampling_params</span> <span class="o">=</span> <span class="n">sampling_params</span>
        <span class="n">self</span><span class="p">.</span><span class="n">block_tables</span> <span class="o">=</span> <span class="n">block_tables</span>
		<span class="bp">...</span>
</code></pre></div></div> <p>SequenceGroupMetadata 记录了一些元信息，下面代码展示了 Scheduler 模块是如何生成这些信息的：</p> <ul> <li><code class="language-plaintext highlighter-rouge">request_id</code> 就是 SequenceGroup的 request_id</li> <li><code class="language-plaintext highlighter-rouge">seq_data</code> 是一个字典，key 是每个 Sequence的 seq_id，value 则是对应的 data （即 SequenceData）</li> <li><code class="language-plaintext highlighter-rouge">block_tables</code>也是一个字典，key 也是每个 Sequence的 seq_id，value 这是对应 Sequence 申请的 block</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Scheduler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">schedule</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="n">SequenceGroupMetadata</span><span class="p">],</span> <span class="n">SchedulerOutputs</span><span class="p">]:</span>
        <span class="n">scheduler_outputs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_schedule</span><span class="p">()</span>

        <span class="c1"># Create input data structures.
</span>        <span class="n">seq_group_metadata_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SequenceGroupMetadata</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">seq_group</span> <span class="ow">in</span> <span class="n">scheduler_outputs</span><span class="p">.</span><span class="n">scheduled_seq_groups</span><span class="p">:</span>
            <span class="n">seq_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">SequenceData</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">block_tables</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">for</span> <span class="n">seq</span> <span class="ow">in</span> <span class="n">seq_group</span><span class="p">.</span><span class="nf">get_seqs</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="n">SequenceStatus</span><span class="p">.</span><span class="n">RUNNING</span><span class="p">):</span>
                <span class="n">seq_id</span> <span class="o">=</span> <span class="n">seq</span><span class="p">.</span><span class="n">seq_id</span>
                <span class="n">seq_data</span><span class="p">[</span><span class="n">seq_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">.</span><span class="n">data</span> <span class="c1"># 单个 SequenceData
</span>                <span class="n">block_tables</span><span class="p">[</span><span class="n">seq_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">block_manager</span><span class="p">.</span><span class="nf">get_block_table</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="c1"># 对应Sequence的block信息
</span>
            <span class="n">seq_group_metadata</span> <span class="o">=</span> <span class="nc">SequenceGroupMetadata</span><span class="p">(</span>
                <span class="n">request_id</span><span class="o">=</span><span class="n">seq_group</span><span class="p">.</span><span class="n">request_id</span><span class="p">,</span>
                <span class="n">is_prompt</span><span class="o">=</span><span class="n">scheduler_outputs</span><span class="p">.</span><span class="n">prompt_run</span><span class="p">,</span>
                <span class="n">seq_data</span><span class="o">=</span><span class="n">seq_data</span><span class="p">,</span>
                <span class="n">sampling_params</span><span class="o">=</span><span class="n">seq_group</span><span class="p">.</span><span class="n">sampling_params</span><span class="p">,</span>
                <span class="n">block_tables</span><span class="o">=</span><span class="n">block_tables</span><span class="p">,</span>
                <span class="n">lora_request</span><span class="o">=</span><span class="n">seq_group</span><span class="p">.</span><span class="n">lora_request</span><span class="p">,</span>
                <span class="n">prefix</span><span class="o">=</span><span class="n">seq_group</span><span class="p">.</span><span class="n">prefix</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">seq_group_metadata_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">seq_group_metadata</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">seq_group_metadata_list</span><span class="p">,</span> <span class="n">scheduler_outputs</span>
</code></pre></div></div> <h2 id="36--sequenceoutput-和-sequencegroupoutput">3.6 SequenceOutput 和 SequenceGroupOutput</h2> <p>SequenceOutput 和 SequenceGroupOutput的关系就类似 Sequence 和 SequenceGroup。SequenceOutput其实就是记录了上一个 输入 token id 以及对应输出的 token id。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SequenceOutput</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">parent_seq_id</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">output_token</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">logprobs</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">],</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">parent_seq_id</span> <span class="o">=</span> <span class="n">parent_seq_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">output_token</span> <span class="o">=</span> <span class="n">output_token</span>
        <span class="n">self</span><span class="p">.</span><span class="n">logprobs</span> <span class="o">=</span> <span class="n">logprobs</span>

<span class="k">class</span> <span class="nc">SequenceGroupOutput</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">samples</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SequenceOutput</span><span class="p">],</span>
        <span class="n">prompt_logprobs</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">PromptLogprobs</span><span class="p">],</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">samples</span> <span class="o">=</span> <span class="n">samples</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prompt_logprobs</span> <span class="o">=</span> <span class="n">prompt_logprobs</span>
</code></pre></div></div> <h1 id="4-samplingparams">4. SamplingParams</h1> <p><img src="https://raw.githubusercontent.com/marsggbo/PicBed/master/小书匠/2024_2_4_1707037767316.png" alt="SamplingParams"/></p> <p>SamplingParams 包含以下参数：</p> <ul> <li><code class="language-plaintext highlighter-rouge">n</code>：要生成的序列的数量，默认为 1。</li> <li><code class="language-plaintext highlighter-rouge">best_of</code>：从多少个序列中选择最佳序列，需要大于 n，默认等于 n。</li> <li><code class="language-plaintext highlighter-rouge">temperature</code>：用于控制生成结果的随机性，较低的温度会使生成结果更确定性，较高的温度会使生成结果更随机。</li> <li><code class="language-plaintext highlighter-rouge">top_p</code>：用于过滤掉生成词汇表中概率低于给定阈值的词汇，控制随机性。</li> <li><code class="language-plaintext highlighter-rouge">top_k</code>：选择前 k 个候选 token，控制多样性。</li> <li><code class="language-plaintext highlighter-rouge">presence_penalty</code>：用于控制生成结果中特定词汇的出现频率。</li> <li><code class="language-plaintext highlighter-rouge">frequency_penalty</code>：用于控制生成结果中词汇的频率分布。</li> <li><code class="language-plaintext highlighter-rouge">repetition_penalty</code>：用于控制生成结果中的词汇重复程度。</li> <li><code class="language-plaintext highlighter-rouge">use_beam_search</code>：是否使用束搜索来生成序列。</li> <li><code class="language-plaintext highlighter-rouge">length_penalty</code>：用于控制生成结果的长度分布。</li> <li><code class="language-plaintext highlighter-rouge">early_stopping</code>：是否在生成过程中提前停止。</li> <li><code class="language-plaintext highlighter-rouge">stop</code>：要停止生成的词汇列表。</li> <li><code class="language-plaintext highlighter-rouge">stop_token_ids</code>：要停止生成的词汇的ID列表。</li> <li><code class="language-plaintext highlighter-rouge">include_stop_str_in_output</code>：是否在输出结果中包含停止字符串。</li> <li><code class="language-plaintext highlighter-rouge">ignore_eos</code>：在生成过程中是否忽略结束符号。</li> <li><code class="language-plaintext highlighter-rouge">max_tokens</code>：生成序列的最大长度。</li> <li><code class="language-plaintext highlighter-rouge">logprobs</code>：用于记录生成过程的概率信息。</li> <li><code class="language-plaintext highlighter-rouge">prompt_logprobs</code>：用于记录生成过程的概率信息，用于特定提示。</li> <li><code class="language-plaintext highlighter-rouge">skip_special_tokens</code>：是否跳过特殊符号。</li> <li><code class="language-plaintext highlighter-rouge">spaces_between_special_tokens</code>：是否在特殊符号之间添加空格。</li> </ul> <p>这些参数的设置通常取决于具体需求和模型性能。以下是一些常见的设置指导方法：</p> <ul> <li><code class="language-plaintext highlighter-rouge">temperature</code>：较低的温度（如0.2）会产生更确定性的结果，而较高的温度（如0.8）会产生更随机的结果。您可以根据您的需求进行调整。</li> <li><code class="language-plaintext highlighter-rouge">presence_penalty、frequency_penalty 和 repetition_penalty</code>：这些参数可以用于控制生成结果中的词汇分布和重复程度。您可以根据您的需求进行调整。</li> <li><code class="language-plaintext highlighter-rouge">use_beam_search</code>：束搜索通常用于生成更高质量的结果，但可能会降低生成速度。您可以根据您的需求进行调整。</li> <li><code class="language-plaintext highlighter-rouge">length_penalty</code>：这个参数可以用于控制生成结果的长度。较高的值会产生更长的结果，而较低的值会产生更短的结果。您可以根据您的需求进行调整。</li> <li><code class="language-plaintext highlighter-rouge">early_stopping</code>：如果您不希望生成过长的结果，可以设置此参数为True。</li> <li><code class="language-plaintext highlighter-rouge">stop 和 stop_token_ids</code>：您可以使用这些参数来指定生成结果的结束条件。</li> </ul> <h1 id="5-output-模块">5. Output 模块</h1> <p><img src="https://raw.githubusercontent.com/marsggbo/PicBed/master/小书匠/2024_2_4_1707040962845.png" alt="Output模块"/></p> <p>Output 主要用于表示语言模型（LLM）的生成结果，包含如下两个模块：</p> <ul> <li><code class="language-plaintext highlighter-rouge">CompletionOutput</code></li> <li><code class="language-plaintext highlighter-rouge">RequestOutput</code></li> </ul> <p>通过上面的介绍我们知道一个 request 可能包含多个序列，<code class="language-plaintext highlighter-rouge">CompletionOutput</code> 用来表示一个 request 中某个序列的完整输出的数据，其中下面的<code class="language-plaintext highlighter-rouge">index</code>就表示该序列在 request 中的索引位置</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CompletionOutput</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">index</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="c1"># 输出结果在请求中的索引
</span>        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="c1"># 生成的文本
</span>        <span class="n">token_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="c1"># 生成的文本对应的 token ID 列表
</span>        <span class="n">cumulative_logprob</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span>
        <span class="n">logprobs</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">SampleLogprobs</span><span class="p">],</span>
        <span class="n">finish_reason</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="c1"># 序列完成的原因（SequenceStatus）
</span>        <span class="n">lora_request</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">LoRARequest</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">index</span>
        <span class="n">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="n">self</span><span class="p">.</span><span class="n">token_ids</span> <span class="o">=</span> <span class="n">token_ids</span>
        <span class="n">self</span><span class="p">.</span><span class="n">finish_reason</span> <span class="o">=</span> <span class="n">finish_reason</span>
		<span class="bp">...</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">RequestOutput</code>则表示 request 所有序列的输出结果，有它的初始化函数可以看到它记录了对应的 <code class="language-plaintext highlighter-rouge">request_id</code>。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RequestOutput</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">request_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">prompt_token_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span>
        <span class="n">prompt_logprobs</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">PromptLogprobs</span><span class="p">],</span>
        <span class="n">outputs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">CompletionOutput</span><span class="p">],</span>
        <span class="n">finished</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
        <span class="n">lora_request</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">LoRARequest</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">request_id</span> <span class="o">=</span> <span class="n">request_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prompt</span> <span class="o">=</span> <span class="n">prompt</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prompt_token_ids</span> <span class="o">=</span> <span class="n">prompt_token_ids</span>
        <span class="n">self</span><span class="p">.</span><span class="n">outputs</span> <span class="o">=</span> <span class="n">outputs</span>
        <span class="n">self</span><span class="p">.</span><span class="n">finished</span> <span class="o">=</span> <span class="n">finished</span>
		<span class="bp">...</span>
</code></pre></div></div> <p>我们看看RequestOutput的from_seq_group就能很好理解<code class="language-plaintext highlighter-rouge">CompletionOutput</code>和 <code class="language-plaintext highlighter-rouge">RequestOutput</code>是如何使用的了。为方便理解，代码有删减，但是不影响最终结果：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RequestOutput</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_seq_group</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">seq_group</span><span class="p">:</span> <span class="n">SequenceGroup</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">RequestOutput</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 1. Get the top-n sequences.
</span>        <span class="n">n</span> <span class="o">=</span> <span class="n">seq_group</span><span class="p">.</span><span class="n">sampling_params</span><span class="p">.</span><span class="n">n</span> <span class="c1"># 每个序列返回的生成序列数量
</span>        <span class="n">seqs</span> <span class="o">=</span> <span class="n">seq_group</span><span class="p">.</span><span class="nf">get_seqs</span><span class="p">()</span>
		<span class="c1"># 根据累积 logprob 值来选择出前 n 个生成序列
</span>		<span class="n">sorting_key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">seq</span><span class="p">:</span> <span class="n">seq</span><span class="p">.</span><span class="nf">get_cumulative_logprob</span><span class="p">()</span>
        <span class="n">sorted_seqs</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">seqs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">sorting_key</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">top_n_seqs</span> <span class="o">=</span> <span class="n">sorted_seqs</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>

        <span class="c1"># 2. Create the outputs.
</span>        <span class="n">outputs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">CompletionOutput</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">seq</span> <span class="ow">in</span> <span class="n">top_n_seqs</span><span class="p">:</span>
            <span class="n">logprobs</span> <span class="o">=</span> <span class="n">seq</span><span class="p">.</span><span class="n">output_logprobs</span>
            <span class="n">finshed_reason</span> <span class="o">=</span> <span class="n">SequenceStatus</span><span class="p">.</span><span class="nf">get_finished_reason</span><span class="p">(</span><span class="n">seq</span><span class="p">.</span><span class="n">status</span><span class="p">)</span>
            <span class="n">output</span> <span class="o">=</span> <span class="nc">CompletionOutput</span><span class="p">(</span><span class="n">seqs</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">seq</span><span class="p">),</span> <span class="n">seq</span><span class="p">.</span><span class="n">output_text</span><span class="p">,</span>
                                      <span class="n">seq</span><span class="p">.</span><span class="nf">get_output_token_ids</span><span class="p">(),</span>
                                      <span class="n">seq</span><span class="p">.</span><span class="nf">get_cumulative_logprob</span><span class="p">(),</span> <span class="n">logprobs</span><span class="p">,</span>
                                      <span class="n">finshed_reason</span><span class="p">)</span>
            <span class="n">outputs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

        <span class="c1"># Every sequence in the sequence group should have the same prompt.
</span>        <span class="n">prompt</span> <span class="o">=</span> <span class="n">seq_group</span><span class="p">.</span><span class="n">prompt</span>
        <span class="n">prompt_token_ids</span> <span class="o">=</span> <span class="n">seq_group</span><span class="p">.</span><span class="n">prompt_token_ids</span>
        <span class="n">prompt_logprobs</span> <span class="o">=</span> <span class="n">seq_group</span><span class="p">.</span><span class="n">prompt_logprobs</span>
        <span class="n">finished</span> <span class="o">=</span> <span class="n">seq_group</span><span class="p">.</span><span class="nf">is_finished</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">seq_group</span><span class="p">.</span><span class="n">request_id</span><span class="p">,</span>
                   <span class="n">prompt</span><span class="p">,</span>
                   <span class="n">prompt_token_ids</span><span class="p">,</span>
                   <span class="n">prompt_logprobs</span><span class="p">,</span>
                   <span class="n">outputs</span><span class="p">,</span>
                   <span class="n">finished</span><span class="p">,</span>
                   <span class="n">lora_request</span><span class="o">=</span><span class="n">seq_group</span><span class="p">.</span><span class="n">lora_request</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">RequestOutput</code>是通过对传入的<code class="language-plaintext highlighter-rouge">seq_group: SequenceGroup</code>进行解析后得到的。解析过程主要有两个阶段：</p> <ol> <li>Get the top-n sequences：这一阶段就是对生成序列按照 cumulative_logprob 进行排序，最后选择出top-n 序列。</li> <li>Create the outputs：将所有top-n生成序列分别转换成 <code class="language-plaintext highlighter-rouge">CompletionOutput</code>列表，并作为<code class="language-plaintext highlighter-rouge">RequestOutput</code>的初始化参数。</li> </ol> <footer style="color:white;;background-color:rgb(24,24,24);padding:10px;border-radius:10px;"> <h3 style="text-align:center;color:tomato;font-size:16px;" id="autoid-2-0-0"> <center> <span>微信公众号：AutoML机器学习</span><br/> <img src="https://pic4.zhimg.com/80/v2-87083e55cd41dbef83cc840c142df48a_720w.jpeg" style="width:200px;height:200px"/> </center> <b>MARSGGBO</b><b style="color:white;"><span style="font-size:25px;">♥</span>原创</b><br/> <span>如有意合作或学术讨论欢迎私戳联系~<br/>邮箱:marsggbo@foxmail.com</span> <b style="color:white;"><br/> </b><p><b style="color:white;"></b> </p></h3> </footer>]]></content><author><name></name></author><category term="techniques"/><category term="LLM"/><category term="Serving"/><category term="vLLM"/><category term="大模型推理"/><summary type="html"><![CDATA[1. Quick Start]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://marsggbo.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://marsggbo.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://marsggbo.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://marsggbo.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://marsggbo.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://marsggbo.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://marsggbo.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://marsggbo.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://marsggbo.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry><entry><title type="html">a post with geojson</title><link href="https://marsggbo.github.io/blog/2024/geojson-map/" rel="alternate" type="text/html" title="a post with geojson"/><published>2024-01-26T17:57:00+00:00</published><updated>2024-01-26T17:57:00+00:00</updated><id>https://marsggbo.github.io/blog/2024/geojson-map</id><content type="html" xml:base="https://marsggbo.github.io/blog/2024/geojson-map/"><![CDATA[<p>This is an example post with some <a href="https://geojson.org/">geojson</a> code. The support is provided thanks to <a href="https://leafletjs.com/">Leaflet</a>. To create your own visualization, go to <a href="https://geojson.io/">geojson.io</a>.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><category term="maps"/><summary type="html"><![CDATA[this is what included geojson code could look like]]></summary></entry><entry><title type="html">a post with echarts</title><link href="https://marsggbo.github.io/blog/2024/echarts/" rel="alternate" type="text/html" title="a post with echarts"/><published>2024-01-26T16:03:00+00:00</published><updated>2024-01-26T16:03:00+00:00</updated><id>https://marsggbo.github.io/blog/2024/echarts</id><content type="html" xml:base="https://marsggbo.github.io/blog/2024/echarts/"><![CDATA[<p>This is an example post with some <a href="https://echarts.apache.org/">echarts</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">echarts
</span><span class="sb">{
  "title": {
    "text": "ECharts Getting Started Example"
  },
  "responsive": true,
  "tooltip": {},
  "legend": {
    "top": "30px",
    "data": ["sales"]
  },
  "xAxis": {
    "data": ["Shirts", "Cardigans", "Chiffons", "Pants", "Heels", "Socks"]
  },
  "yAxis": {},
  "series": [
    {
      "name": "sales",
      "type": "bar",
      "data": [5, 20, 36, 10, 10, 20]
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-echarts">{
  "title": {
    "text": "ECharts Getting Started Example"
  },
  "responsive": true,
  "tooltip": {},
  "legend": {
    "top": "30px",
    "data": ["sales"]
  },
  "xAxis": {
    "data": ["Shirts", "Cardigans", "Chiffons", "Pants", "Heels", "Socks"]
  },
  "yAxis": {},
  "series": [
    {
      "name": "sales",
      "type": "bar",
      "data": [5, 20, 36, 10, 10, 20]
    }
  ]
}
</code></pre> <p>Note that this library offer support for both light and dark themes. You can switch between them using the theme switcher in the top right corner of the page.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included echarts code could look like]]></summary></entry><entry><title type="html">a post with chart.js</title><link href="https://marsggbo.github.io/blog/2024/chartjs/" rel="alternate" type="text/html" title="a post with chart.js"/><published>2024-01-26T01:04:00+00:00</published><updated>2024-01-26T01:04:00+00:00</updated><id>https://marsggbo.github.io/blog/2024/chartjs</id><content type="html" xml:base="https://marsggbo.github.io/blog/2024/chartjs/"><![CDATA[<p>This is an example post with some <a href="https://www.chartjs.org/">chart.js</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">chartjs
</span><span class="sb">{
  "type": "line",
  "data": {
    "labels": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July"
    ],
    "datasets": [
      {
        "label": "# of bugs",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(75,192,192,0.4)",
        "borderColor": "rgba(75,192,192,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(75,192,192,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(75,192,192,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          65,
          59,
          80,
          81,
          56,
          55,
          40
        ],
        "spanGaps": false
      }
    ]
  },
  "options": {}
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-chartjs">{
  "type": "line",
  "data": {
    "labels": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July"
    ],
    "datasets": [
      {
        "label": "# of bugs",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(75,192,192,0.4)",
        "borderColor": "rgba(75,192,192,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(75,192,192,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(75,192,192,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          65,
          59,
          80,
          81,
          56,
          55,
          40
        ],
        "spanGaps": false
      }
    ]
  },
  "options": {}
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">chartjs
</span><span class="sb">{
  "type": "doughnut",
  "data": {
    "labels": [
      "Red",
      "Blue",
      "Yellow"
    ],
    "datasets": [
      {
        "data": [
          300,
          50,
          100
        ],
        "backgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ],
        "hoverBackgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ]
      }
    ]
  },
  "options": {}
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-chartjs">{
  "type": "doughnut",
  "data": {
    "labels": [
      "Red",
      "Blue",
      "Yellow"
    ],
    "datasets": [
      {
        "data": [
          300,
          50,
          100
        ],
        "backgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ],
        "hoverBackgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ]
      }
    ]
  },
  "options": {}
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included chart.js code could look like]]></summary></entry><entry><title type="html">a post with TikZJax</title><link href="https://marsggbo.github.io/blog/2023/tikzjax/" rel="alternate" type="text/html" title="a post with TikZJax"/><published>2023-12-12T22:25:00+00:00</published><updated>2023-12-12T22:25:00+00:00</updated><id>https://marsggbo.github.io/blog/2023/tikzjax</id><content type="html" xml:base="https://marsggbo.github.io/blog/2023/tikzjax/"><![CDATA[<p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p> <script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included TikZ code could look like]]></summary></entry><entry><title type="html">a post with bibliography</title><link href="https://marsggbo.github.io/blog/2023/post-bibliography/" rel="alternate" type="text/html" title="a post with bibliography"/><published>2023-07-12T13:56:00+00:00</published><updated>2023-07-12T13:56:00+00:00</updated><id>https://marsggbo.github.io/blog/2023/post-bibliography</id><content type="html" xml:base="https://marsggbo.github.io/blog/2023/post-bibliography/"><![CDATA[<p>This post shows how to add bibliography to simple blog posts. We support every citation style that <a href="https://github.com/inukshuk/jekyll-scholar">jekyll-scholar</a> does. That means simple citation like (missing reference), multiple citations like (missing reference), long references like (missing reference) or also quotes:</p> <blockquote><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,<br/>sed do eiusmod tempor.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing.</p><cite>(missing reference)</cite></blockquote> <p>If you would like something more academic, check the <a href="/blog/2021/distill/">distill style post</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="bib"/><summary type="html"><![CDATA[an example of a blog post with bibliography]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://marsggbo.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://marsggbo.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://marsggbo.github.io/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'assets/jupyter/blog.ipynb'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">relative_url</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">file_exists</span><span class="w"> </span>assets/jupyter/blog.ipynb<span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'true'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">jupyter_notebook</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">%}</span>
  &lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
<span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry></feed>